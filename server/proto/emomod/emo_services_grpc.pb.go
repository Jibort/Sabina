// Fitxer de definició proto pels serveis de sincronització.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: emomod/emo_services.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmoSyncService_CheckEmoMod_FullMethodName = "/proto.EmoSyncService/CheckEmoMod"
	EmoSyncService_TranslateIt_FullMethodName = "/proto.EmoSyncService/TranslateIt"
)

// EmoSyncServiceClient is the client API for EmoSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmoSyncServiceClient interface {
	// Petició de sincronització del mòdul EMOMOD.
	CheckEmoMod(ctx context.Context, in *GbSyncEmoMod, opts ...grpc.CallOption) (*EmoModuleLists, error)
	// Petició de traducció.
	TranslateIt(ctx context.Context, in *PrtDownloadTranslation, opts ...grpc.CallOption) (*PrtTranslation, error)
}

type emoSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmoSyncServiceClient(cc grpc.ClientConnInterface) EmoSyncServiceClient {
	return &emoSyncServiceClient{cc}
}

func (c *emoSyncServiceClient) CheckEmoMod(ctx context.Context, in *GbSyncEmoMod, opts ...grpc.CallOption) (*EmoModuleLists, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmoModuleLists)
	err := c.cc.Invoke(ctx, EmoSyncService_CheckEmoMod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emoSyncServiceClient) TranslateIt(ctx context.Context, in *PrtDownloadTranslation, opts ...grpc.CallOption) (*PrtTranslation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrtTranslation)
	err := c.cc.Invoke(ctx, EmoSyncService_TranslateIt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmoSyncServiceServer is the server API for EmoSyncService service.
// All implementations must embed UnimplementedEmoSyncServiceServer
// for forward compatibility.
type EmoSyncServiceServer interface {
	// Petició de sincronització del mòdul EMOMOD.
	CheckEmoMod(context.Context, *GbSyncEmoMod) (*EmoModuleLists, error)
	// Petició de traducció.
	TranslateIt(context.Context, *PrtDownloadTranslation) (*PrtTranslation, error)
	mustEmbedUnimplementedEmoSyncServiceServer()
}

// UnimplementedEmoSyncServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmoSyncServiceServer struct{}

func (UnimplementedEmoSyncServiceServer) CheckEmoMod(context.Context, *GbSyncEmoMod) (*EmoModuleLists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEmoMod not implemented")
}
func (UnimplementedEmoSyncServiceServer) TranslateIt(context.Context, *PrtDownloadTranslation) (*PrtTranslation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateIt not implemented")
}
func (UnimplementedEmoSyncServiceServer) mustEmbedUnimplementedEmoSyncServiceServer() {}
func (UnimplementedEmoSyncServiceServer) testEmbeddedByValue()                        {}

// UnsafeEmoSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmoSyncServiceServer will
// result in compilation errors.
type UnsafeEmoSyncServiceServer interface {
	mustEmbedUnimplementedEmoSyncServiceServer()
}

func RegisterEmoSyncServiceServer(s grpc.ServiceRegistrar, srv EmoSyncServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmoSyncServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmoSyncService_ServiceDesc, srv)
}

func _EmoSyncService_CheckEmoMod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GbSyncEmoMod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmoSyncServiceServer).CheckEmoMod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmoSyncService_CheckEmoMod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmoSyncServiceServer).CheckEmoMod(ctx, req.(*GbSyncEmoMod))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmoSyncService_TranslateIt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrtDownloadTranslation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmoSyncServiceServer).TranslateIt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmoSyncService_TranslateIt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmoSyncServiceServer).TranslateIt(ctx, req.(*PrtDownloadTranslation))
	}
	return interceptor(ctx, in, info, handler)
}

// EmoSyncService_ServiceDesc is the grpc.ServiceDesc for EmoSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmoSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EmoSyncService",
	HandlerType: (*EmoSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckEmoMod",
			Handler:    _EmoSyncService_CheckEmoMod_Handler,
		},
		{
			MethodName: "TranslateIt",
			Handler:    _EmoSyncService_TranslateIt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emomod/emo_services.proto",
}
