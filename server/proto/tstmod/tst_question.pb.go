// Fitxer de definici贸 proto de les preguntes d'un test d'avaluaci贸.
// createdAt: 24/09/26 dj. JIQ

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: tstmod/tst_question.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Tipus de pregunta de tests d'avaluaci贸.
type TstTestQuestionType int32

const (
	TstTestQuestionType_TST_TEST_QUESTION_TYPE_UNSPECIFIED TstTestQuestionType = 0
	TstTestQuestionType_TST_TEST_QUESTION_TYPE_PLAIN_TEXT  TstTestQuestionType = 1
	TstTestQuestionType_TST_TEST_QUESTION_TYPE_BOOLEAN     TstTestQuestionType = 2
	TstTestQuestionType_TST_TEST_QUESTION_TYPE_OPTION_LIST TstTestQuestionType = 4
	TstTestQuestionType_TST_TEST_QUESTION_TYPE_EMOTION     TstTestQuestionType = 5
	TstTestQuestionType_TST_TEST_QUESTION_TYPE_MOOD        TstTestQuestionType = 6
	TstTestQuestionType_TST_TEST_QUESTION_TYPE_DATE        TstTestQuestionType = 7
	TstTestQuestionType_TST_TEST_QUESTION_TYPE_DATE_TIME   TstTestQuestionType = 8
)

// Enum value maps for TstTestQuestionType.
var (
	TstTestQuestionType_name = map[int32]string{
		0: "TST_TEST_QUESTION_TYPE_UNSPECIFIED",
		1: "TST_TEST_QUESTION_TYPE_PLAIN_TEXT",
		2: "TST_TEST_QUESTION_TYPE_BOOLEAN",
		4: "TST_TEST_QUESTION_TYPE_OPTION_LIST",
		5: "TST_TEST_QUESTION_TYPE_EMOTION",
		6: "TST_TEST_QUESTION_TYPE_MOOD",
		7: "TST_TEST_QUESTION_TYPE_DATE",
		8: "TST_TEST_QUESTION_TYPE_DATE_TIME",
	}
	TstTestQuestionType_value = map[string]int32{
		"TST_TEST_QUESTION_TYPE_UNSPECIFIED": 0,
		"TST_TEST_QUESTION_TYPE_PLAIN_TEXT":  1,
		"TST_TEST_QUESTION_TYPE_BOOLEAN":     2,
		"TST_TEST_QUESTION_TYPE_OPTION_LIST": 4,
		"TST_TEST_QUESTION_TYPE_EMOTION":     5,
		"TST_TEST_QUESTION_TYPE_MOOD":        6,
		"TST_TEST_QUESTION_TYPE_DATE":        7,
		"TST_TEST_QUESTION_TYPE_DATE_TIME":   8,
	}
)

func (x TstTestQuestionType) Enum() *TstTestQuestionType {
	p := new(TstTestQuestionType)
	*p = x
	return p
}

func (x TstTestQuestionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TstTestQuestionType) Descriptor() protoreflect.EnumDescriptor {
	return file_tstmod_tst_question_proto_enumTypes[0].Descriptor()
}

func (TstTestQuestionType) Type() protoreflect.EnumType {
	return &file_tstmod_tst_question_proto_enumTypes[0]
}

func (x TstTestQuestionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TstTestQuestionType.Descriptor instead.
func (TstTestQuestionType) EnumDescriptor() ([]byte, []int) {
	return file_tstmod_tst_question_proto_rawDescGZIP(), []int{0}
}

// Definici贸 d'una pregunta de Test.
type TstQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseEntity       *ModelEntity        `protobuf:"bytes,1,opt,name=base_entity,json=baseEntity,proto3" json:"base_entity,omitempty"`
	Test             *TstTest            `protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
	TestQuestionType TstTestQuestionType `protobuf:"varint,3,opt,name=test_question_type,json=testQuestionType,proto3,enum=proto.TstTestQuestionType" json:"test_question_type,omitempty"`
	Block            *TstQuestion        `protobuf:"bytes,4,opt,name=block,proto3,oneof" json:"block,omitempty"`
	Question         string              `protobuf:"bytes,5,opt,name=question,proto3" json:"question,omitempty"`
	Help             *string             `protobuf:"bytes,6,opt,name=help,proto3,oneof" json:"help,omitempty"`
	Mandatory        bool                `protobuf:"varint,7,opt,name=mandatory,proto3" json:"mandatory,omitempty"`
	Custom           bool                `protobuf:"varint,8,opt,name=custom,proto3" json:"custom,omitempty"`
}

func (x *TstQuestion) Reset() {
	*x = TstQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tstmod_tst_question_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TstQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TstQuestion) ProtoMessage() {}

func (x *TstQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_tstmod_tst_question_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TstQuestion.ProtoReflect.Descriptor instead.
func (*TstQuestion) Descriptor() ([]byte, []int) {
	return file_tstmod_tst_question_proto_rawDescGZIP(), []int{0}
}

func (x *TstQuestion) GetBaseEntity() *ModelEntity {
	if x != nil {
		return x.BaseEntity
	}
	return nil
}

func (x *TstQuestion) GetTest() *TstTest {
	if x != nil {
		return x.Test
	}
	return nil
}

func (x *TstQuestion) GetTestQuestionType() TstTestQuestionType {
	if x != nil {
		return x.TestQuestionType
	}
	return TstTestQuestionType_TST_TEST_QUESTION_TYPE_UNSPECIFIED
}

func (x *TstQuestion) GetBlock() *TstQuestion {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *TstQuestion) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *TstQuestion) GetHelp() string {
	if x != nil && x.Help != nil {
		return *x.Help
	}
	return ""
}

func (x *TstQuestion) GetMandatory() bool {
	if x != nil {
		return x.Mandatory
	}
	return false
}

func (x *TstQuestion) GetCustom() bool {
	if x != nil {
		return x.Custom
	}
	return false
}

var File_tstmod_tst_question_proto protoreflect.FileDescriptor

var file_tstmod_tst_question_proto_rawDesc = []byte{
	0x0a, 0x19, 0x74, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x2f, 0x74, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x74, 0x73, 0x74, 0x6d, 0x6f, 0x64, 0x2f, 0x74,
	0x73, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x02,
	0x0a, 0x0b, 0x54, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x73, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10,
	0x74, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2d, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x68,
	0x65, 0x6c, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x68, 0x65, 0x6c,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x2a, 0xbc, 0x02,
	0x0a, 0x13, 0x54, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x54, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x54, 0x45,
	0x58, 0x54, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x53, 0x54, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x04,
	0x12, 0x22, 0x0a, 0x1e, 0x54, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x4f, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x53, 0x54,
	0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x4f, 0x4f, 0x44, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x53, 0x54, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x53, 0x54, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08, 0x42, 0x04, 0x5a, 0x02,
	0x2e, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tstmod_tst_question_proto_rawDescOnce sync.Once
	file_tstmod_tst_question_proto_rawDescData = file_tstmod_tst_question_proto_rawDesc
)

func file_tstmod_tst_question_proto_rawDescGZIP() []byte {
	file_tstmod_tst_question_proto_rawDescOnce.Do(func() {
		file_tstmod_tst_question_proto_rawDescData = protoimpl.X.CompressGZIP(file_tstmod_tst_question_proto_rawDescData)
	})
	return file_tstmod_tst_question_proto_rawDescData
}

var file_tstmod_tst_question_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tstmod_tst_question_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_tstmod_tst_question_proto_goTypes = []any{
	(TstTestQuestionType)(0), // 0: proto.TstTestQuestionType
	(*TstQuestion)(nil),      // 1: proto.TstQuestion
	(*ModelEntity)(nil),      // 2: proto.ModelEntity
	(*TstTest)(nil),          // 3: proto.TstTest
}
var file_tstmod_tst_question_proto_depIdxs = []int32{
	2, // 0: proto.TstQuestion.base_entity:type_name -> proto.ModelEntity
	3, // 1: proto.TstQuestion.test:type_name -> proto.TstTest
	0, // 2: proto.TstQuestion.test_question_type:type_name -> proto.TstTestQuestionType
	1, // 3: proto.TstQuestion.block:type_name -> proto.TstQuestion
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_tstmod_tst_question_proto_init() }
func file_tstmod_tst_question_proto_init() {
	if File_tstmod_tst_question_proto != nil {
		return
	}
	file_model_entity_proto_init()
	file_tstmod_tst_test_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tstmod_tst_question_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TstQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tstmod_tst_question_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tstmod_tst_question_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tstmod_tst_question_proto_goTypes,
		DependencyIndexes: file_tstmod_tst_question_proto_depIdxs,
		EnumInfos:         file_tstmod_tst_question_proto_enumTypes,
		MessageInfos:      file_tstmod_tst_question_proto_msgTypes,
	}.Build()
	File_tstmod_tst_question_proto = out.File
	file_tstmod_tst_question_proto_rawDesc = nil
	file_tstmod_tst_question_proto_goTypes = nil
	file_tstmod_tst_question_proto_depIdxs = nil
}
